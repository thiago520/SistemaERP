/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import controle.ConectaBanco;
import controle.ControlePedido;
import controle.GeraLog;
import controle.Impressao;
import controle.ImpressaoPedido;
import controle.ModeloTabela;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import modelo.ModeloPedido;

/**
 *
 * @author thiag
 */
public final class FrmListaPedido extends javax.swing.JFrame {
    
    ConectaBanco connLPedido = new ConectaBanco();
   // ConectaBanco connIPedido = new ConectaBanco();
  //  ConectaBanco connSPedido = new ConectaBanco();    
    ImpressaoPedido impressaoPedido = new ImpressaoPedido();
    ModeloPedido mod = new ModeloPedido();
    FrmPedido frm = new FrmPedido();
    ControlePedido control = new ControlePedido();    
    FrmFinalizacao frmFinalizacao = new FrmFinalizacao();
    Impressao impressao = new Impressao();
    GeraLog log = new GeraLog();
   // int statusBar = 0;  
    NumberFormat formatoMoeda = NumberFormat.getCurrencyInstance();  
    SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
    String data;
    int i;
    int AvisoiFood;

    /**
     * Creates new form FrmListaPedido
     */
    public FrmListaPedido() {
       /* try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        } */
        //Layout
        /*   try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        } */
        
        //Layout
        /* setUndecorated(true);
        getRootPane().setWindowDecorationStyle(JRootPane.FRAME); */
        
        initComponents();          
        jDateChooserInicial.setDate(new Date());
        jDateChooserFinal.setDate(new Date());        
        data = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooserInicial.getDate());                           
        jCheckBoxAtualizar.setSelected(true);
        preencherTabela("select cast(pedido.datahora_entrada as time) as horaEntrada, cast(pedido.datahora_entrada as date) as dataEntrada, "
                + "pedido.data_agendada, pedido.cod_pedido, pedido.hora_agendada, clientes.nome_cliente,pedido.status,pedido.local,"
                + "cast(pedido.datahora_saida as time) as horaSaida, cast(pedido.datahora_saida as date) as dataSaida, pedido.entregador "
                + "from pedido,clientes where pedido.cod_cliente = clientes.id_cliente and pedido.data_agendada = '"+ data +"' "
                + "order by dataEntrada,pedido.data_agendada,horaEntrada,pedido.cod_pedido");
      //  preencherTabelaiFood();
        qtdePedidos();
        InputMap inputMap = this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0),"Novo");        
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Novo", new AbstractAction(){
            private static final long serialVersionUID = 1L;
            @Override
            public void actionPerformed(ActionEvent arg0) {                
                jButtonNovo.doClick();
            }            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.WARNING: Do NOT modify this code.
     * The content of this method is always
 regenerated by the Form Editor.
     * @param SQL
     */         
    
    public void preencherTabela(String SQL){
        ArrayList dados = new ArrayList();
        String dataHoraSaida = null;
        connLPedido.conexao();  
    
        String [] Colunas = new String[]{"Código","Data","Hora","Cliente","Local","Status","Entregador","Saída"};        
    
        connLPedido.executaSQL(SQL);
        
        try {            
            if (!connLPedido.rs.next()) {                
            } else {
                    connLPedido.rs.first();
                    do{ 
                        if (connLPedido.rs.getDate("dataSaida") != null ) {
                            dataHoraSaida = formataData.format(connLPedido.rs.getDate("dataSaida"));
                            dataHoraSaida += " - " + connLPedido.rs.getString("horaSaida");    
                        }
                         dados.add(new Object[]{connLPedido.rs.getInt("cod_pedido"),formataData.format(connLPedido.rs.getDate("data_agendada")),connLPedido.rs.getString("hora_agendada"),connLPedido.rs.getString("nome_cliente"),connLPedido.rs.getString("local"),connLPedido.rs.getString("status"),connLPedido.rs.getString("entregador"),dataHoraSaida});                         
                         dataHoraSaida = "";
                    }while(connLPedido.rs.next());
                }
        } catch (SQLException ex) {
            System.out.println("Erro ao preencher o ArrayList!\n Erro: "+ex);
            log.gravaErro(ex.toString(), "preencherTabela");
        } 
        
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTablePedidos.setModel(modelo);
        jTablePedidos.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTablePedidos.getColumnModel().getColumn(0).setResizable(true);
        jTablePedidos.getColumnModel().getColumn(1).setPreferredWidth(90);
        jTablePedidos.getColumnModel().getColumn(1).setResizable(true);
        jTablePedidos.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTablePedidos.getColumnModel().getColumn(2).setResizable(true);
        jTablePedidos.getColumnModel().getColumn(3).setPreferredWidth(230);
        jTablePedidos.getColumnModel().getColumn(3).setResizable(true);        
        jTablePedidos.getColumnModel().getColumn(4).setPreferredWidth(90);
        jTablePedidos.getColumnModel().getColumn(4).setResizable(true);        
        jTablePedidos.getColumnModel().getColumn(5).setPreferredWidth(85);
        jTablePedidos.getColumnModel().getColumn(5).setResizable(true);        
        jTablePedidos.getColumnModel().getColumn(6).setPreferredWidth(70);
        jTablePedidos.getColumnModel().getColumn(6).setResizable(true);     
        jTablePedidos.getColumnModel().getColumn(7).setPreferredWidth(160);
        jTablePedidos.getColumnModel().getColumn(7).setResizable(true);     
        
        jTablePedidos.getTableHeader().setReorderingAllowed(false);
        jTablePedidos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);        
        CorNaLinha();
      //  if (statusBar == 0) {
          if (jCheckBoxAtualizar.isSelected() == true) {
            BarraStatus();      
          }
          connLPedido.desconecta();
          
      //  }         
    }  
    
    public void CorNaLinha(){        
        
        jTablePedidos.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Object status = jTablePedidos.getValueAt(row, 5);              
                setBackground(new java.awt.Color(255,255,255));                     
                
                if (status != null && "Agendado".equals(status.toString())) {
                    setBackground(new java.awt.Color(204,204,204));
                }
                
                if (status != null && "Em Preparo".equals(status.toString())) {
                    setBackground(new java.awt.Color(255,153,0));
                }
                
                if (status != null && "Enviado".equals(status.toString())) {
                    setBackground(new java.awt.Color(153,255,153));                    
                }
                
                if (status != null && "Finalizado".equals(status.toString())) {
                    setBackground(new java.awt.Color(153,204,255));                    
                }                
                
                if (status != null && "Cancelado".equals(status.toString())) {
                    setBackground(new java.awt.Color(255,102,102));
                }
                
                if (isSelected) {
                    setBackground(new java.awt.Color(176,196,222));                    
                }
                
             return label;
            }
        });
    }  
    
    public void BarraStatus() {
        String dataInicial = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooserInicial.getDate());
        String dataFinal = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooserFinal.getDate());                
        new Thread() {
            @Override
            public void run(){
                for (i = 0; i<101; i++) {
                    try {
                        sleep(50);                          
                       // jProgressBar.setValue(i);                        
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex);
                        log.gravaErro(ex.toString(), "BarraStatus");                      
                    }                    
                }  
                    if (jCheckBoxAtualizar.isSelected() == true) {
                        preencherTabela("select cast(pedido.datahora_entrada as time) as horaEntrada, "
                                + "cast(pedido.datahora_entrada as date) as dataEntrada, pedido.data_agendada, pedido.cod_pedido, "
                                + "pedido.hora_agendada, clientes.nome_cliente,pedido.status,pedido.local,"
                                + "cast(pedido.datahora_saida as time) as horaSaida, cast(pedido.datahora_saida as date) as dataSaida, pedido.entregador "
                                + "from pedido,clientes "
                                + "where pedido.cod_cliente = clientes.id_cliente and pedido.data_agendada "
                                + "between '"+ dataInicial +"' and '"+ dataFinal +"' "
                                + "order by dataEntrada,pedido.data_agendada,horaEntrada,pedido.cod_pedido");
                    //    preencherTabelaiFood();
                        qtdePedidos();
                        try {
                            if ("SABORTRIVIAL".equals(InetAddress.getLocalHost().getHostName())) {
                                // ImprimeLista();
                                verificaImpressao();                                    
                              //  avisoiFood();
                            }
                        } catch (UnknownHostException ex) {
                            Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex); 
                           log.gravaErro(ex.toString(), "preencherTabela");                          
                        }
                    }
            }            
        }.start();        
    }
    
    public void verificaImpressao() {
        GregorianCalendar gc = new GregorianCalendar();
        gc.setTime(new Date());        
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        gc.add(Calendar.MINUTE,-5);
        String horaAtual = sdf.format(gc.getTime());                    
        gc.setTime(new Date());        
        gc.add(Calendar.MINUTE,+60);
        String horaAdiantada = sdf.format(gc.getTime());
        data = new SimpleDateFormat("yyyy-MM-dd").format(new Date());        
        
        connLPedido.conexao();
        connLPedido.executaSQL("select "
                + "pedido.cod_pedido,"
                + "pedido.local"
                + " from pedido,clientes "
                + "where pedido.cod_cliente = clientes.id_cliente and pedido.status = 'Agendado' and pedido.data_agendada = '" + data + "' "
                + "and (pedido.hora_agendada between '" + horaAtual + "' and '" + horaAdiantada + "' or pedido.hora_agendada is null)");
             
             
        try {
            if(connLPedido.rs.next()) {
                connLPedido.rs.first();
                mod.setCod_pedido(connLPedido.rs.getInt("cod_pedido"));
                mod.setStatus("Em Preparo");
                control.AlterarStatus(mod);
                if (!"iFood".equals(connLPedido.rs.getString("local")) ) {                                        
                    impressaoPedido.gerarImpressao(connLPedido.rs.getInt("cod_pedido"));                          
                }                
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex);
            log.gravaErro(ex.toString(), "verificaImpressao");           
        }
        connLPedido.desconecta();
    }
    
 /*   public void ImprimeLista() {         
        GregorianCalendar gc = new GregorianCalendar();
        gc.setTime(new Date());        
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        gc.add(Calendar.MINUTE,-5);
        String horaAtual = sdf.format(gc.getTime());                    
        gc.setTime(new Date());        
        gc.add(Calendar.MINUTE,+60);
        String horaAdiantada = sdf.format(gc.getTime());
        data = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        Double saldo;
        connLPedido.conexao();  
        connIPedido.conexao();
        connSPedido.conexao();
        
        impressao.detectaImpressoras();        
        connLPedido.executaSQL("select * from pedido,clientes where pedido.cod_cliente = clientes.id_cliente and pedido.status = 'Agendado' and pedido.data_agendada = '"+ data +"' and (pedido.hora_agendada between '"+ horaAtual +"' and '"+ horaAdiantada +"')");        
        
        try {
            if(!connLPedido.rs.next()) {
                
            } else {                
            
                connLPedido.rs.first();  
                
                do{                    
                   connIPedido.executaSQL("select itens_pedido.qtda_produto,produtos.nome_produto,itens_pedido.valor_un,itens_pedido.obs_produto from pedido,itens_pedido,produtos where pedido.cod_pedido = itens_pedido.cod_pedido and itens_pedido.cod_produto = produtos.id_produto and itens_pedido.cod_pedido = '"+ connLPedido.rs.getInt("cod_pedido")+"'");
                   connIPedido.rs.first();               
                   connSPedido.executaSQL("select SUM(valor_pago)-(SUM(valor_total)-SUM(desconto)) as TOTAL from pedido where status = 'Finalizado' and cod_cliente = " + connLPedido.rs.getInt("cod_cliente") + "");   
                   connSPedido.rs.first();
                   data = formataData.format(connLPedido.rs.getDate("data_agendada"));
                   saldo = connSPedido.rs.getDouble("TOTAL");
                   mod.setCod_pedido(connLPedido.rs.getInt("cod_pedido"));
                   mod.setStatus("Em Preparo");                    
                   control.AlterarStatus(mod); 
                   
                   impressao.imprime("----------------------------------------\n\r"
                                     +"      Sabor Trivial "+" -  "+ connLPedido.rs.getString("local") +"\n\r"
                                     +"Pedido: "+ connLPedido.rs.getInt("cod_pedido") +" - "+ data +" "+ connLPedido.rs.getTime("hora_agendada")+"\n\r\n\r"                       
                                     +"Dados do Cliente\n\r"
                                     +"Nome: "+ connLPedido.rs.getString("nome_cliente")+"\n\r"
                                     +"Endereco: "+ connLPedido.rs.getString("endereco_cliente") +", "+ connLPedido.rs.getInt("numero_cliente")+"\n\r"                       
                                     +"Complemento: "+ connLPedido.rs.getString("complemento_cliente")+"\n\r"
                                     +"Empresa: "+ connLPedido.rs.getString("empresa_cliente")+"\n\r"
                                     +"Tel: "+ connLPedido.rs.getString("telefone_cliente")+"\n\r"
                                     +"Celular: "+ connLPedido.rs.getString("celular_cliente")+"\n\r"                                 
                                     +"\n\r\n\rItens do Pedido\n\r"
                                     +"Qtda   Item                       Preco\n\r"                                     
                   );

                        do{
                            impressao.imprime(connIPedido.rs.getDouble("qtda_produto")+"   "+ connIPedido.rs.getString("nome_produto")+"            "+ formatoMoeda.format(connIPedido.rs.getDouble("qtda_produto")*connIPedido.rs.getDouble("valor_un"))+"\n\r"
                                         +"     "+ connIPedido.rs.getString("obs_produto") +"\n\r"
                            );                   
                        }while(connIPedido.rs.next());                
                    impressao.imprime("\n\r                   Sub-Total: "+ formatoMoeda.format(connLPedido.rs.getDouble("valor_total"))+"\n\r");
                    if (connLPedido.rs.getDouble("desconto")!= 0) {
                        impressao.imprime("                    Desconto: "+ formatoMoeda.format(connLPedido.rs.getDouble("desconto"))+"\n\r");
                    }                    
                    if ( saldo != 0 || saldo != -0) {
                        impressao.imprime("               Em Haver/Deve: "+ formatoMoeda.format(saldo)+"\n\r");                            
                    }
                    impressao.imprime("----------------------------------------\n\r"
                                      +"               Total a pagar: "+ formatoMoeda.format((connLPedido.rs.getDouble("valor_total")-saldo-connLPedido.rs.getDouble("desconto")))+"\n\r");                                                            
                    if (connLPedido.rs.getDouble("valor_pago")!= 0) {
                        impressao.imprime("                   Valor Pago: "+ formatoMoeda.format(connLPedido.rs.getDouble("valor_pago"))+"\n\r");
                    }
                    if (connLPedido.rs.getDouble("troco")!= 0) {
                        impressao.imprime("                Troco para: "+ formatoMoeda.format(connLPedido.rs.getDouble("troco"))+"\n\r");                                            
                        impressao.imprime("                Enviar troco: "+ formatoMoeda.format(connLPedido.rs.getDouble("troco")-(connLPedido.rs.getDouble("valor_total")-saldo-connLPedido.rs.getDouble("desconto")))+"\n\r");                                            
                    }
                    impressao.imprime("\n\rForma de Pagamento\n\r"
                                      + connLPedido.rs.getString("forma_pagamento") +"\n\r\n\r"
                                      +"Observacao Pedido\n\r"
                                      + connLPedido.rs.getString("obs_pedido") +"\n\r\n\r\n\r\n\r\n\r");                                       
                    
                   //impressao codigo de barras impressao.imprime("" + (char) 29 + (char) 107 + (char) 73 + (char) 28 + connLPedido.rs.getInt("cod_pedido")+"\n\r");                
                    impressao.acionarGuilhotina();                                    
                    try { Thread.sleep(50000); } catch (InterruptedException ex) {}
                }while(connLPedido.rs.next());              
            }    
        } catch (SQLException ex) {
            Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
        connLPedido.desconecta();
        connIPedido.desconecta();
        connSPedido.desconecta();
    } */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldPesquisa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooserInicial = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jDateChooserFinal = new com.toedter.calendar.JDateChooser();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonNovo = new javax.swing.JButton();
        jButtonAlterar = new javax.swing.JButton();
        jButtonImprimir = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jButtonFinalizar = new javax.swing.JButton();
        jCheckBoxAtualizar = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePedidos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableiFood = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        lblQtde1 = new javax.swing.JLabel();
        lblQtde2 = new javax.swing.JLabel();
        lblQtde3 = new javax.swing.JLabel();
        lblQtde4 = new javax.swing.JLabel();
        lblQnum1 = new javax.swing.JLabel();
        lblQnum2 = new javax.swing.JLabel();
        lblQnum3 = new javax.swing.JLabel();
        lblQnum4 = new javax.swing.JLabel();

        jLabel7.setText("Whatsapp ");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciador de Pedidos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTextFieldPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPesquisaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jLabel1.setText("Cliente:");

        jLabel2.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jLabel2.setText("Data Inicial:");

        jDateChooserInicial.setDateFormatString("dd/MM/y");

        jLabel3.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jLabel3.setText("Data Final:");

        jDateChooserFinal.setDateFormatString("dd/MM/y");

        jButtonPesquisar.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jButtonNovo.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jButtonNovo.setText("Novo [F1]");
        jButtonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoActionPerformed(evt);
            }
        });

        jButtonAlterar.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jButtonAlterar.setText("Alterar");
        jButtonAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarActionPerformed(evt);
            }
        });

        jButtonImprimir.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jButtonSair.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jButtonFinalizar.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jButtonFinalizar.setText("Finalizar");
        jButtonFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFinalizarActionPerformed(evt);
            }
        });

        jCheckBoxAtualizar.setFont(new java.awt.Font("Bremen Bd BT", 0, 12)); // NOI18N
        jCheckBoxAtualizar.setText("Atualizar");
        jCheckBoxAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAtualizarActionPerformed(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Bremen Bd BT", 0, 10)); // NOI18N

        jTablePedidos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTablePedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTablePedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePedidosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePedidos);

        jTabbedPane1.addTab("Pedido", jScrollPane1);

        jTableiFood.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTableiFood.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableiFood);

        jTabbedPane1.addTab("iFood", jScrollPane2);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pedidos", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bremen Bd BT", 2, 10))); // NOI18N
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblQtde1.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQtde1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblQtde1.setText("Whatsapp ");

        lblQtde2.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQtde2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblQtde2.setText("Whatsapp ");

        lblQtde3.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQtde3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblQtde3.setText("Whatsapp ");

        lblQtde4.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQtde4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblQtde4.setText("Whatsapp ");

        lblQnum1.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQnum1.setText("jLabel5");

        lblQnum2.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQnum2.setText("jLabel6");

        lblQnum3.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQnum3.setText("jLabel8");

        lblQnum4.setFont(new java.awt.Font("Bremen Bd BT", 2, 10)); // NOI18N
        lblQnum4.setText("jLabel9");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblQtde1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQnum1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQtde2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQnum2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQtde3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQnum3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQtde4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQnum4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQtde1)
                    .addComponent(lblQnum1)
                    .addComponent(lblQtde2)
                    .addComponent(lblQnum2)
                    .addComponent(lblQtde3)
                    .addComponent(lblQnum3)
                    .addComponent(lblQtde4)
                    .addComponent(lblQnum4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 74, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextFieldPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jDateChooserInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(541, 541, 541)
                                .addComponent(jButtonPesquisar)))
                        .addGap(35, 35, 35)
                        .addComponent(jCheckBoxAtualizar)
                        .addGap(46, 46, 46))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonFinalizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonPesquisar)
                        .addComponent(jCheckBoxAtualizar))
                    .addComponent(jDateChooserFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooserInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldPesquisa))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovo)
                    .addComponent(jButtonAlterar)
                    .addComponent(jButtonImprimir)
                    .addComponent(jButtonFinalizar)
                    .addComponent(jButtonSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Pedido");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(914, 630));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        connLPedido.desconecta();
        dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
     //  statusBar = 1;  
       String dataInicial = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooserInicial.getDate());
       String dataFinal = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooserFinal.getDate());        
       preencherTabela("select "
                + "cast(pedido.datahora_entrada as time) as horaEntrada,"
                + " COALESCE(cast(pedido.datahora_entrada as date),"
                + "pedido.data_agendada) AS dataAgendada,"
                + "pedido.cod_pedido,"
                + "pedido.data_agendada,"
                + "pedido.hora_agendada,"
                + "clientes.nome_cliente,"
                + "pedido.status,"
                + "pedido.local,"
                + " cast(pedido.datahora_saida as time) as horaSaida,"
                + " cast(pedido.datahora_saida as date) as dataSaida,"
                + " pedido.entregador "
                + "from pedido,clientes "
                + "where pedido.cod_cliente = clientes.id_cliente and clientes.nome_cliente like '%" + jTextFieldPesquisa.getText() + "%' and COALESCE(cast(pedido.datahora_entrada as date),pedido.data_agendada) between '"+ dataInicial +"' and '" + dataFinal + "' "
                + "order by dataAgendada,pedido.data_agendada,pedido.hora_agendada,pedido.cod_pedido");       
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoActionPerformed
        mod.setBtnAlterarLista(1);
        try {
            frm.ReceberBotao(mod);
        } catch (ParseException ex) {
            Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex);
            log.gravaErro(ex.toString(), "ButtonNovo");            
        }
        frm.setVisible(true);
    }//GEN-LAST:event_jButtonNovoActionPerformed

    private void jTablePedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePedidosMouseClicked
        String cod = ""+jTablePedidos.getValueAt(jTablePedidos.getSelectedRow(),0);
        connLPedido.conexao();
        connLPedido.executaSQL("select * from pedido where cod_pedido='"+cod+"'");             
              
       try {                  
                    
            connLPedido.rs.first();            
            mod.setCod_pedido(connLPedido.rs.getInt("cod_pedido"));
            mod.setCod_cliente(connLPedido.rs.getInt("cod_cliente"));
            mod.setStatus(connLPedido.rs.getString("status"));
            mod.setForma_pagamento(connLPedido.rs.getString("forma_pagamento"));
            mod.setDesconto(connLPedido.rs.getDouble("desconto"));
            mod.setValor_pago(connLPedido.rs.getDouble("valor_pago"));

            java.sql.Date dataFormat = connLPedido.rs.getDate("data_agendada");
            data = new SimpleDateFormat("dd/MM/yyyy").format(dataFormat);            
            mod.setData_agendada(data);            
            
            if (connLPedido.rs.getString("hora_agendada") == null) {
                mod.setHora_agendada(null);                
            } else {
                mod.setHora_agendada(connLPedido.rs.getString("hora_agendada"));
            }
            
            mod.setObs_pedido(connLPedido.rs.getString("obs_pedido"));
            mod.setLocal(connLPedido.rs.getString("local"));
            mod.setTroco(connLPedido.rs.getDouble("troco"));
            mod.setValor_total(connLPedido.rs.getDouble("valor_total"));            
                       
        } catch (SQLException s){
            JOptionPane.showMessageDialog(rootPane,"Erro ao selecionar os dados!\nErro: " + s);
            log.gravaErro(s.toString(), "TablePedidosMouseClicked");          
        }
       connLPedido.desconecta();
    }//GEN-LAST:event_jTablePedidosMouseClicked

    private void jButtonAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarActionPerformed
         mod.setBtnAlterarLista(2);                
        try {
            frm.ReceberBotao(mod);
        } catch (ParseException ex) {
            Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex);
            log.gravaErro(ex.toString(), "ButtonAlterarAction");            
        }
         frm.setVisible(true);         
    }//GEN-LAST:event_jButtonAlterarActionPerformed

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed
        String cod = ""+jTablePedidos.getValueAt(jTablePedidos.getSelectedRow(),0);    
        impressaoPedido.gerarImpressao(Integer.parseInt(cod));                
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jButtonFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFinalizarActionPerformed
        frmFinalizacao.setVisible(true);        
    }//GEN-LAST:event_jButtonFinalizarActionPerformed

    private void jCheckBoxAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAtualizarActionPerformed
        if (jCheckBoxAtualizar.isSelected() == true) {
            jDateChooserInicial.setDate(new Date());
            jDateChooserFinal.setDate(new Date());
            jTextFieldPesquisa.setText("");            
            i = 0;
            BarraStatus();
        }
    }//GEN-LAST:event_jCheckBoxAtualizarActionPerformed

    private void jTextFieldPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPesquisaActionPerformed

    public void preencherTabelaiFood(){                 
        ArrayList dados = new ArrayList();
        connLPedido.conexao();        
        String SQL = "select pedido.cod_cliente, clientes.nome_cliente, Count(*) as pedidos from pedido,clientes "
                + "where pedido.local = 'ifood' and pedido.cod_cliente = clientes.id_cliente and pedido.status = 'Finalizado' "
                + "group by pedido.cod_cliente HAVING pedidos > 8 order by pedidos DESC";
        
    
        String [] Colunas = new String[]{"Código Cliente","Nome","Pedidos"};        
    
        connLPedido.executaSQL(SQL);
        
        try {            
            if (!connLPedido.rs.next()) {                
            } else {
                    connLPedido.rs.first();
                    do{ 
                       dados.add(new Object[]{connLPedido.rs.getInt("cod_cliente"),connLPedido.rs.getString("nome_cliente"),connLPedido.rs.getInt("pedidos")});                                                                                               
                    }while(connLPedido.rs.next());
                }
        } catch (SQLException ex) {
            System.out.println("Erro ao preencher o ArrayList!\n Erro: "+ex);
            log.gravaErro(ex.toString(), "preencherTabelaiFood");          
        } 
        
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTableiFood.setModel(modelo);
        jTableiFood.getColumnModel().getColumn(0).setPreferredWidth(135);
        jTableiFood.getColumnModel().getColumn(0).setResizable(false);
        jTableiFood.getColumnModel().getColumn(1).setPreferredWidth(365);
        jTableiFood.getColumnModel().getColumn(1).setResizable(false);
        jTableiFood.getColumnModel().getColumn(2).setPreferredWidth(130);
        jTableiFood.getColumnModel().getColumn(2).setResizable(false);        
        
        jTableiFood.getTableHeader().setReorderingAllowed(false);
        jTableiFood.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        
        connLPedido.desconecta();        
    }
     
    public void avisoiFood() {         
        if (!frm.nomeCliente.equals("")) {
            JOptionPane.showMessageDialog(null, frm.nomeCliente + " possui " + frm.qtdPedidos +" pedidos efetuados!"); 
            AvisoiFood = 1;              
        }   
    }
    
    public void qtdePedidos() {
        connLPedido.conexao();
        connLPedido.executaSQL("select local, count(local) as nome from pedido where data_agendada = current_date group by local order by local");       
        try {
            if (!connLPedido.rs.first()) {
                lblQtde1.setText("");
                lblQnum1.setText("");                
            } else {
                lblQtde1.setText(connLPedido.rs.getString("local"));
                lblQnum1.setText(String.valueOf(connLPedido.rs.getInt("nome")));    
            }                        
            
            if (!connLPedido.rs.next()) {
                lblQtde2.setText("");
                lblQnum2.setText("");                
            } else {
                lblQtde2.setText(connLPedido.rs.getString("local"));
                lblQnum2.setText(String.valueOf(connLPedido.rs.getInt("nome")));        
            }                        
            
            if(!connLPedido.rs.next()) {
                lblQtde3.setText("");
                lblQnum3.setText("");                
            } else {
                lblQtde3.setText(connLPedido.rs.getString("local"));
                lblQnum3.setText(String.valueOf(connLPedido.rs.getInt("nome")));        
            }                        
            
            if (!connLPedido.rs.next()) {
                lblQtde4.setText("");
                lblQnum4.setText("");                
            } else {
                lblQtde4.setText(connLPedido.rs.getString("local"));
                lblQnum4.setText(String.valueOf(connLPedido.rs.getInt("nome")));        
            }          
            
        } catch (SQLException ex) {
            Logger.getLogger(FrmListaPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        connLPedido.desconecta();
    }
     
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListaPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListaPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListaPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListaPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FrmListaPedido().setVisible(true);
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterar;
    private javax.swing.JButton jButtonFinalizar;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JCheckBox jCheckBoxAtualizar;
    private com.toedter.calendar.JDateChooser jDateChooserFinal;
    private com.toedter.calendar.JDateChooser jDateChooserInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTablePedidos;
    private javax.swing.JTable jTableiFood;
    private javax.swing.JTextField jTextFieldPesquisa;
    private javax.swing.JLabel lblQnum1;
    private javax.swing.JLabel lblQnum2;
    private javax.swing.JLabel lblQnum3;
    private javax.swing.JLabel lblQnum4;
    private javax.swing.JLabel lblQtde1;
    private javax.swing.JLabel lblQtde2;
    private javax.swing.JLabel lblQtde3;
    private javax.swing.JLabel lblQtde4;
    // End of variables declaration//GEN-END:variables
}
